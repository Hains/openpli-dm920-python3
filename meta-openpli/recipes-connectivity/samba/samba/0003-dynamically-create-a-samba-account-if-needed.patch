From 5c563da62516279c80f2facbddaf289e880792c3 Mon Sep 17 00:00:00 2001
From: WanWizard <wanwizard@openpli.org>
Date: Fri, 19 Oct 2018 15:18:11 +0100
Subject: [PATCH] dynamically create a samba account if needed

---
 source3/pam_smbpass/pam_smb_passwd.c | 220 ++++++++++++++++++---------
 1 file changed, 144 insertions(+), 76 deletions(-)

diff --git a/source3/pam_smbpass/pam_smb_passwd.c b/source3/pam_smbpass/pam_smb_passwd.c
index 1adebe2e898..b4826759d24 100644
--- a/source3/pam_smbpass/pam_smb_passwd.c
+++ b/source3/pam_smbpass/pam_smb_passwd.c
@@ -1,18 +1,18 @@
 /*
    Unix SMB/CIFS implementation.
    Use PAM to update user passwords in the local SAM
-   Copyright (C) Steve Langasek		1998-2003
-   
+   Copyright (C) Steve Langasek                1998-2003
+
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.
-   
+
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
-   
+
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
@@ -41,37 +41,40 @@
 #include <pam/pam_modules.h>
 #endif
 
-#include "general.h" 
+#include "general.h"
 
 #include "support.h"
 
+static int _smb_add_user(pam_handle_t *pamh, unsigned int ctrl,
+                         const char *name, struct samu *sampass, bool exist);
+
 static int smb_update_db( pam_handle_t *pamh, int ctrl, const char *user,  const char *pass_new )
 {
-	int retval;
-	char *err_str = NULL;
-	char *msg_str = NULL;
+        int retval;
+        char *err_str = NULL;
+        char *msg_str = NULL;
 
-	retval = NT_STATUS_IS_OK(local_password_change(user, LOCAL_SET_PASSWORD, pass_new,
-	                                &err_str,
-	                                &msg_str));
+        retval = NT_STATUS_IS_OK(local_password_change(user, LOCAL_SET_PASSWORD, pass_new,
+                                        &err_str,
+                                        &msg_str));
 
-	if (!retval) {
-		if (err_str) {
-			make_remark(pamh, ctrl, PAM_ERROR_MSG, err_str );
-		}
+        if (!retval) {
+                if (err_str) {
+                        make_remark(pamh, ctrl, PAM_ERROR_MSG, err_str );
+                }
 
-		/* FIXME: what value is appropriate here? */
-		retval = PAM_AUTHTOK_ERR;
-	} else {
-		if (msg_str) {
-			make_remark(pamh, ctrl, PAM_TEXT_INFO, msg_str );
-		}
-		retval = PAM_SUCCESS;
-	}
+                /* FIXME: what value is appropriate here? */
+                retval = PAM_AUTHTOK_ERR;
+        } else {
+                if (msg_str) {
+                        make_remark(pamh, ctrl, PAM_TEXT_INFO, msg_str );
+                }
+                retval = PAM_SUCCESS;
+        }
 
-	SAFE_FREE(err_str);
-	SAFE_FREE(msg_str);
-	return retval;      
+        SAFE_FREE(err_str);
+        SAFE_FREE(msg_str);
+        return retval;
 }
 
 
@@ -119,7 +122,7 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
         if (on( SMB_DEBUG, ctrl )) {
             _log_err(pamh, LOG_DEBUG, "password: could not identify user");
         }
-	TALLOC_FREE(frame);
+        TALLOC_FREE(frame);
         return retval;
     }
     if (on( SMB_DEBUG, ctrl )) {
@@ -127,9 +130,9 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
     }
 
     if (geteuid() != 0) {
-	_log_err(pamh, LOG_DEBUG, "Cannot access samba password database, not running as root.");
-	TALLOC_FREE(frame);
-	return PAM_AUTHINFO_UNAVAIL;
+        _log_err(pamh, LOG_DEBUG, "Cannot access samba password database, not running as root.");
+        TALLOC_FREE(frame);
+        return PAM_AUTHINFO_UNAVAIL;
     }
 
     /* Getting into places that might use LDAP -- protect the app
@@ -139,22 +142,27 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
     if (!initialize_password_db(False, NULL)) {
       _log_err(pamh, LOG_ALERT, "Cannot access samba password database" );
         CatchSignal(SIGPIPE, oldsig_handler);
-	TALLOC_FREE(frame);
+        TALLOC_FREE(frame);
         return PAM_AUTHINFO_UNAVAIL;
     }
 
     /* obtain user record */
     if ( !(sampass = samu_new( NULL )) ) {
         CatchSignal(SIGPIPE, oldsig_handler);
-	TALLOC_FREE(frame);
+        TALLOC_FREE(frame);
         return nt_status_to_pam(NT_STATUS_NO_MEMORY);
     }
 
+	/* try to migrate it */
     if (!pdb_getsampwnam(sampass,user)) {
-        _log_err(pamh, LOG_ALERT, "Failed to find entry for user %s.", user);
-        CatchSignal(SIGPIPE, oldsig_handler);
-	TALLOC_FREE(frame);
-	return PAM_USER_UNKNOWN;
+		_log_err(pamh, LOG_DEBUG, "Attempting migration for user %s", user);
+		retval = _smb_add_user(pamh, ctrl, user, sampass, 0);
+		if (!pdb_getsampwnam(sampass,user)) {
+			_log_err(pamh, LOG_ALERT, "Failed to find entry for user %s even after migration.", user);
+			CatchSignal(SIGPIPE, oldsig_handler);
+			TALLOC_FREE(frame);
+			return PAM_USER_UNKNOWN;
+		}
     }
     if (on( SMB_DEBUG, ctrl )) {
         _log_err(pamh, LOG_DEBUG, "Located account for %s", user);
@@ -172,22 +180,22 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
 
             TALLOC_FREE(sampass);
             CatchSignal(SIGPIPE, oldsig_handler);
-	    TALLOC_FREE(frame);
+            TALLOC_FREE(frame);
             return PAM_SUCCESS;
         }
 
-	/* Password change by root, or for an expired token, doesn't
+        /* Password change by root, or for an expired token, doesn't
            require authentication.  Is this a good choice? */
         if (getuid() != 0 && !(flags & PAM_CHANGE_EXPIRED_AUTHTOK)) {
 
             /* tell user what is happening */
-		if (asprintf(&Announce, "Changing password for %s", user) == -1) {
-			_log_err(pamh, LOG_CRIT, "password: out of memory");
-			TALLOC_FREE(sampass);
-			CatchSignal(SIGPIPE, oldsig_handler);
-			TALLOC_FREE(frame);
-			return PAM_BUF_ERR;
-		}
+                if (asprintf(&Announce, "Changing password for %s", user) == -1) {
+                        _log_err(pamh, LOG_CRIT, "password: out of memory");
+                        TALLOC_FREE(sampass);
+                        CatchSignal(SIGPIPE, oldsig_handler);
+                        TALLOC_FREE(frame);
+                        return PAM_BUF_ERR;
+                }
 
             set( SMB__OLD_PASSWD, ctrl );
             retval = _smb_read_password( pamh, ctrl, Announce, "Current SMB password: ",
@@ -199,7 +207,7 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
                          "password - (old) token not obtained");
                 TALLOC_FREE(sampass);
                 CatchSignal(SIGPIPE, oldsig_handler);
-		TALLOC_FREE(frame);
+                TALLOC_FREE(frame);
                 return retval;
             }
 
@@ -208,14 +216,14 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
             retval = _smb_verify_password( pamh, sampass, pass_old, ctrl );
 
         } else {
-	    pass_old = NULL;
+            pass_old = NULL;
             retval = PAM_SUCCESS;           /* root doesn't have to */
         }
 
         pass_old = NULL;
         TALLOC_FREE(sampass);
         CatchSignal(SIGPIPE, oldsig_handler);
-	TALLOC_FREE(frame);
+        TALLOC_FREE(frame);
         return retval;
 
     } else if (flags & PAM_UPDATE_AUTHTOK) {
@@ -237,7 +245,7 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
             retval = _pam_get_data( pamh, _SMB_OLD_AUTHTOK,
                                    &pass_old );
             if (retval == PAM_NO_MODULE_DATA) {
-		pass_old = NULL;
+                pass_old = NULL;
                 retval = PAM_SUCCESS;
             }
         }
@@ -246,14 +254,14 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
             _log_err(pamh, LOG_NOTICE, "password: user not authenticated");
             TALLOC_FREE(sampass);
             CatchSignal(SIGPIPE, oldsig_handler);
-	    TALLOC_FREE(frame);
+            TALLOC_FREE(frame);
             return retval;
         }
 
         /*
          * use_authtok is to force the use of a previously entered
          * password -- needed for pluggable password strength checking
-	 * or other module stacking
+         * or other module stacking
          */
 
         if (on( SMB_USE_AUTHTOK, ctrl )) {
@@ -275,7 +283,7 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
             pass_old = NULL;                               /* tidy up */
             TALLOC_FREE(sampass);
             CatchSignal(SIGPIPE, oldsig_handler);
-	    TALLOC_FREE(frame);
+            TALLOC_FREE(frame);
             return retval;
         }
 
@@ -283,7 +291,7 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
          * At this point we know who the user is and what they
          * propose as their new password. Verify that the new
          * password is acceptable.
-         */ 
+         */
 
         if (pass_new[0] == '\0') {     /* "\0" password = NULL */
             pass_new = NULL;
@@ -296,7 +304,7 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
             pass_new = pass_old = NULL;               /* tidy up */
             TALLOC_FREE(sampass);
             CatchSignal(SIGPIPE, oldsig_handler);
-	    TALLOC_FREE(frame);
+            TALLOC_FREE(frame);
             return retval;
         }
 
@@ -309,28 +317,28 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
 
         retval = smb_update_db(pamh, ctrl, user, pass_new);
         if (retval == PAM_SUCCESS) {
-	    uid_t uid;
-	    
+            uid_t uid;
+
             /* password updated */
-		if (!sid_to_uid(pdb_get_user_sid(sampass), &uid)) {
-			_log_err(pamh, LOG_NOTICE,
-			         "Unable to get uid for user %s",
-				pdb_get_username(sampass));
-			_log_err(pamh, LOG_NOTICE, "password for (%s) changed by (%s/%d)",
-				user, uidtoname(getuid()), getuid());
-		} else {
-			_log_err(pamh, LOG_NOTICE, "password for (%s/%d) changed by (%s/%d)",
-				user, uid, uidtoname(getuid()), getuid());
-		}
-	} else {
-		_log_err(pamh, LOG_ERR, "password change failed for user %s", user);
-	}
+                if (!sid_to_uid(pdb_get_user_sid(sampass), &uid)) {
+                        _log_err(pamh, LOG_NOTICE,
+                                 "Unable to get uid for user %s",
+                                pdb_get_username(sampass));
+                        _log_err(pamh, LOG_NOTICE, "password for (%s) changed by (%s/%d)",
+                                user, uidtoname(getuid()), getuid());
+                } else {
+                        _log_err(pamh, LOG_NOTICE, "password for (%s/%d) changed by (%s/%d)",
+                                user, uid, uidtoname(getuid()), getuid());
+                }
+        } else {
+                _log_err(pamh, LOG_ERR, "password change failed for user %s", user);
+        }
 
         pass_old = pass_new = NULL;
-	if (sampass) {
-		TALLOC_FREE(sampass);
-		sampass = NULL;
-	}
+        if (sampass) {
+                TALLOC_FREE(sampass);
+                sampass = NULL;
+        }
 
     } else {            /* something has broken with the library */
 
@@ -338,10 +346,10 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
         retval = PAM_ABORT;
 
     }
-    
+
     if (sampass) {
-    	TALLOC_FREE(sampass);
-	sampass = NULL;
+            TALLOC_FREE(sampass);
+        sampass = NULL;
     }
 
     TALLOC_FREE(sampass);
@@ -350,6 +358,66 @@ int pam_sm_chauthtok(pam_handle_t *pamh, int flags,
     return retval;
 }
 
+/* Helper function for adding a user to the db. */
+static int _smb_add_user(pam_handle_t *pamh, unsigned int ctrl,
+                         const char *name, struct samu *sampass, bool exist)
+{
+	char *err_str = NULL;
+	char *msg_str = NULL;
+	const char *pass = NULL;
+	int retval;
+	TALLOC_CTX *frame = talloc_stackframe();
+
+	/* Get the authtok; if we don't have one, silently fail. */
+	retval = _pam_get_item( pamh, PAM_AUTHTOK, &pass );
+
+	if (pass == NULL) {
+		TALLOC_FREE(frame);
+		return PAM_IGNORE;
+	}
+
+	if (retval != PAM_SUCCESS) {
+		_log_err(pamh, LOG_ALERT
+			, "pam_get_item returned error to pam_sm_authenticate" );
+		TALLOC_FREE(frame);
+		return PAM_AUTHTOK_RECOVER_ERR;
+	}
+
+	/* Add the user to the db if they aren't already there. */
+	if (!exist) {
+		retval = NT_STATUS_IS_OK(local_password_change(name, LOCAL_ADD_USER|LOCAL_SET_PASSWORD,
+					pass, &err_str, &msg_str));
+		if (!retval && err_str) {
+			make_remark(pamh, ctrl, PAM_ERROR_MSG, err_str );
+		} else if (msg_str) {
+			make_remark(pamh, ctrl, PAM_TEXT_INFO, msg_str );
+		}
+		pass = NULL;
+
+		SAFE_FREE(err_str);
+		SAFE_FREE(msg_str);
+		TALLOC_FREE(frame);
+		return PAM_IGNORE;
+	} else {
+		/* mimick 'update encrypted' as long as the 'no pw req' flag is not set */
+		if ( pdb_get_acct_ctrl(sampass) & ~ACB_PWNOTREQ ) {
+			retval = NT_STATUS_IS_OK(local_password_change(name, LOCAL_SET_PASSWORD,
+					pass, &err_str, &msg_str));
+			if (!retval && err_str) {
+				make_remark(pamh, ctrl, PAM_ERROR_MSG, err_str );
+			} else if (msg_str) {
+				make_remark(pamh, ctrl, PAM_TEXT_INFO, msg_str );
+			}
+		}
+	}
+
+	SAFE_FREE(err_str);
+	SAFE_FREE(msg_str);
+	pass = NULL;
+	TALLOC_FREE(frame);
+	return PAM_IGNORE;
+}
+
 /* static module data */
 #ifdef PAM_STATIC
 struct pam_module _pam_smbpass_passwd_modstruct = {
-- 
2.17.1

