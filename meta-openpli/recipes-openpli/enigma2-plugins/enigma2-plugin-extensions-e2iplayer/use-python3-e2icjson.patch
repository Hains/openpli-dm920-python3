diff --git a/IPTVPlayer/libs/e2ijson.py b/IPTVPlayer/libs/e2ijson.py
index 85255a7d..493ba835 100644
--- a/IPTVPlayer/libs/e2ijson.py
+++ b/IPTVPlayer/libs/e2ijson.py
@@ -3,41 +3,30 @@
 ###################################################
 # LOCAL import
 ###################################################
-# from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, byteify
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, byteify
 ###################################################
 
 ###################################################
 # FOREIGN import
 ###################################################
-# try:
 import json
-# except Exception:
-#    import simplejson as json
-# e2icjson = None
+from Plugins.Extensions.IPTVPlayer.libs.e2icjson import e2icjson
 ############################################
 
+useE2icjson = True
 
 def loads(inputString, noneReplacement=None, baseTypesAsString=False, utf8=True):
-#    global e2icjson
-#    e2icjson = False
-#    if e2icjson is None:
-#        try:
-#            from Plugins.Extensions.IPTVPlayer.libs.e2icjson import e2icjson
-#            e2icjson = e2icjson
-#        except Exception:
-#            e2icjson = False
-#            printExc()
-#    if e2icjson:
-#        printDBG(">> cjson ACELERATION noneReplacement[%s] baseTypesAsString[%s]" % (noneReplacement, baseTypesAsString))
-#        out = e2icjson.decode(input, 2 if utf8 else 1)
+    if useE2icjson:
+        printDBG(">> cjson ACELERATION noneReplacement[%s] baseTypesAsString[%s]" % (noneReplacement, baseTypesAsString))
+        out = e2icjson.decode(input, 1 if utf8 else 2)
         # if noneReplacement != None or baseTypesAsString != False:
         #    printDBG(">> cjson ACELERATION byteify")
         #    out = byteify(out, noneReplacement, baseTypesAsString)
-#    else:
-    return json.loads(inputString)
+    else:
+        out = json.loads(input)
         # if utf8 or noneReplacement != None or baseTypesAsString != False:
         #    out = byteify(out, noneReplacement, baseTypesAsString)
-#    return out
+    return out
 
 
 def dumps(inputString, *args, **kwargs):
