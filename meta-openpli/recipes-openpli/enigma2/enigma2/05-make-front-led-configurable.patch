diff --git a/data/setup.xml b/data/setup.xml
index 4f5cbd253..851dee3cf 100644
--- a/data/setup.xml
+++ b/data/setup.xml
@@ -223,6 +223,10 @@
 		<item level="0" text="Brightness" description="Configure the brightness level of the front panel display.">config.lcd.bright</item>
 		<item level="0" text="Contrast" description="Configure the contrast level of the front panel display.">config.lcd.contrast</item>
 		<item level="0" text="Standby" description="Configure the brightness level of the front panel display during standby.">config.lcd.standby</item>
+		<item level="0" text="LED color during normal operations" description="Configure front LED color during normal operations (this requires an enigma2 restart).">config.usage.frontled_color</item>
+		<item level="0" text="LED color during recording" description="Configure front LED color during recording (this requires an enigma2 restart).">config.usage.frontledrec_color</item>
+		<item level="0" text="LED color during standby" description="Configure front LED color during standby (this requires an enigma2 restart).">config.usage.frontledstdby_color</item>
+		<item level="0" text="LED color during recording in standby" description="Configure front LED color during recording in standby (this requires an enigma2 restart).">config.usage.frontledrecstdby_color</item>
 		<item level="0" text="Power LED" description="Turn on the power LED." requires="PowerLED">config.usage.powerLED</item>
 		<item level="0" text="Standby LED" description="Turn on the power LED during standby." requires="StandbyLED">config.usage.standbyLED</item>
 		<item level="0" text="Deep Standby LED" description="Turn on the power LED during deep standby." requires="SuspendLED">config.usage.suspendLED</item>
diff --git a/lib/python/Components/UsageConfig.py b/lib/python/Components/UsageConfig.py
index 32757534f..f1ce6fab0 100644
--- a/lib/python/Components/UsageConfig.py
+++ b/lib/python/Components/UsageConfig.py
@@ -242,6 +242,35 @@ def InitUsageConfig():
 		("5", "DVB-T/-S/-C"),
 		("127", _("No priority"))])
 
+	config.usage.frontled_color = ConfigSelection(default="2", choices=[
+		("0", _("Off")),
+		("1", _("Blue")),
+		("2", _("Red")),
+		("3", _("Blinking blue")),
+		("4", _("Blinking red"))
+	])
+	config.usage.frontledrec_color = ConfigSelection(default="3", choices=[
+		("0", _("Off")),
+		("1", _("Blue")),
+		("2", _("Red")),
+		("3", _("Blinking blue")),
+		("4", _("Blinking red"))
+	])
+	config.usage.frontledstdby_color = ConfigSelection(default="0", choices=[
+		("0", _("Off")),
+		("1", _("Blue")),
+		("2", _("Red")),
+		("3", _("Blinking blue")),
+		("4", _("Blinking red"))
+	])
+	config.usage.frontledrecstdby_color = ConfigSelection(default="3", choices=[
+		("0", _("Off")),
+		("1", _("Blue")),
+		("2", _("Red")),
+		("3", _("Blinking blue")),
+		("4", _("Blinking red"))
+	])
+
 	def remote_fallback_changed(configElement):
 		if configElement.value:
 			configElement.value = "%s%s" % (not configElement.value.startswith("http://") and "http://" or "", configElement.value)
diff --git a/lib/python/Screens/SessionGlobals.py b/lib/python/Screens/SessionGlobals.py
index b438505c8..669ae574a 100644
--- a/lib/python/Screens/SessionGlobals.py
+++ b/lib/python/Screens/SessionGlobals.py
@@ -8,7 +8,9 @@ from Components.Sources.TunerInfo import TunerInfo
 from Components.Sources.Boolean import Boolean
 from Components.Sources.RecordState import RecordState
 from Components.Converter.Combine import Combine
-from Components.Renderer.FrontpanelLed import FrontpanelLed, PATTERN_OFF, PATTERN_BLINK
+from Components.Renderer.FrontpanelLed import FrontpanelLed
+from Components.config import config
+from Components.SystemInfo import SystemInfo
 
 
 class SessionGlobals(Screen):
@@ -24,17 +26,69 @@ class SessionGlobals(Screen):
 		self["RecordState"] = RecordState(session)
 		self["Standby"] = Boolean(fixed=False)
 
-		from Components.SystemInfo import SystemInfo
+		combine = Combine(func=lambda s: {(False, False): 0, (False, True): 1, (True, False): 2, (True, True): 3}[(s[0].boolean, s[1].boolean)])
+		combine.connect(self["Standby"])
+		combine.connect(self["RecordState"])
 
-		nr_leds = SystemInfo.get("NumFrontpanelLEDs", 0)
+		#                      |  two leds  | single led |
+		# recordstate  standby   red green
+		#    false      false    off   on     off
+		#    true       false    blnk  on     blnk
+		#    false      true      on   off    off
+		#    true       true     blnk  off    blnk
+
+		PATTERN_ON = (20, 0xffffffff, 0xffffffff)
+		PATTERN_OFF = (20, 0, 0)
+		PATTERN_BLINK = (20, 0x55555555, 0xa7fccf7a)
+
+		NormalLed0 = PATTERN_OFF
+		NormalLed1 = PATTERN_OFF
+		if config.usage.frontled_color.value == "1":
+			NormalLed0 = PATTERN_ON
+		if config.usage.frontled_color.value == "2":
+			NormalLed1 = PATTERN_ON
+		if config.usage.frontled_color.value == "3":
+			NormalLed0 = PATTERN_BLINK
+		if config.usage.frontled_color.value == "4":
+			NormalLed1 = PATTERN_BLINK
+
+		RecLed0 = PATTERN_OFF
+		RecLed1 = PATTERN_OFF
+		if config.usage.frontledrec_color.value == "1":
+			RecLed0 = PATTERN_ON
+		if config.usage.frontledrec_color.value == "2":
+			RecLed1 = PATTERN_ON
+		if config.usage.frontledrec_color.value == "3":
+			RecLed0 = PATTERN_BLINK
+		if config.usage.frontledrec_color.value == "4":
+			RecLed1 = PATTERN_BLINK
 
-		if nr_leds > 0:
-			combine = Combine(func=lambda s: {(False, False): 0, (False, True): 1, (True, False): 2, (True, True): 3}[(s[0].boolean, s[1].boolean)])
-			combine.connect(self["Standby"])
-			combine.connect(self["RecordState"])
+		StandbyLed0 = PATTERN_OFF
+		StandbyLed1 = PATTERN_OFF
+		if config.usage.frontledstdby_color.value == "1":
+			StandbyLed0 = PATTERN_ON
+		if config.usage.frontledstdby_color.value == "2":
+			StandbyLed1 = PATTERN_ON
+		if config.usage.frontledstdby_color.value == "3":
+			StandbyLed0 = PATTERN_BLINK
+		if config.usage.frontledstdby_color.value == "4":
+			StandbyLed1 = PATTERN_BLINK
+
+		RecstdbyLed0 = PATTERN_OFF
+		RecstdbyLed1 = PATTERN_OFF
+		if config.usage.frontledrecstdby_color.value == "1":
+			RecstdbyLed0 = PATTERN_ON
+		if config.usage.frontledrecstdby_color.value == "2":
+			RecstdbyLed1 = PATTERN_ON
+		if config.usage.frontledrecstdby_color.value == "3":
+			RecstdbyLed0 = PATTERN_BLINK
+		if config.usage.frontledrecstdby_color.value == "4":
+			RecstdbyLed1 = PATTERN_BLINK
+
+		nr_leds = SystemInfo.get("NumFrontpanelLEDs", 0)
 
-			if nr_leds == 1:
-				FrontpanelLed(which=0, boolean=False, patterns=[PATTERN_OFF, PATTERN_BLINK, PATTERN_OFF, PATTERN_BLINK]).connect(combine)
-			elif nr_leds == 2:
-				FrontpanelLed(which=0, boolean=False, get_patterns=True).connect(combine)
-				FrontpanelLed(which=1, boolean=False, get_patterns=True).connect(combine)
+		if nr_leds == 1:
+			FrontpanelLed(which=0, boolean=False, patterns=[PATTERN_OFF, PATTERN_BLINK, PATTERN_OFF, PATTERN_BLINK]).connect(combine)
+		elif nr_leds == 2:
+			FrontpanelLed(which=0, boolean=False, patterns=[NormalLed0, RecLed0, StandbyLed0, RecstdbyLed0]).connect(combine)
+			FrontpanelLed(which=1, boolean=False, patterns=[NormalLed1, RecLed1, StandbyLed1, RecstdbyLed1]).connect(combine)
