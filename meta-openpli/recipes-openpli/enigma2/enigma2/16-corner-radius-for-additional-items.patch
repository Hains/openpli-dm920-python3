Reverts commits:

https://github.com/OpenPLi/enigma2/commit/113431cb7d9f731f9cb249feeb83e0697658b8d0
https://github.com/OpenPLi/enigma2/commit/e03d1f768d1cf3bffad61710b54ca69550539923
https://github.com/OpenPLi/enigma2/commit/228d0e0fffdbd7804852bbbdd2145a64ab5f3824
https://github.com/OpenPLi/enigma2/commit/b0c1ad4c87bc780568040ad3e3013fc7ccf532a7
https://github.com/OpenPLi/enigma2/commit/3c7c5c0325ebec694cad77ff1922b7bd02462edd
https://github.com/OpenPLi/enigma2/commit/4bec0faae6cb6db1da83965752851b96d8e3837e

diff --git a/lib/gui/elistbox.cpp b/lib/gui/elistbox.cpp
index 189da4606..bc9019f38 100644
--- a/lib/gui/elistbox.cpp
+++ b/lib/gui/elistbox.cpp
@@ -3,9 +3,6 @@
 #include <lib/gui/eslider.h>
 #include <lib/actions/action.h>
 
-int eListbox::defaultItemRadius[2] = {0,0};
-int eListbox::defaultItemRadiusEdges[2] = {0,0};
-
 eListbox::eListbox(eWidget *parent) :
 	eWidget(parent), m_scrollbar_mode(showNever), m_prev_scrollbar_page(-1),
 	m_content_changed(false), m_enabled_wrap_around(false), m_scrollbar_width(10), m_scrollbar_height(10),
@@ -15,14 +12,6 @@ eListbox::eListbox(eWidget *parent) :
 	memset(static_cast<void*>(&m_style), 0, sizeof(m_style));
 	m_style.m_text_offset = ePoint(1,1);
 
-	for (int x = 0; x < 2; x++)
-	{
-		if (eListbox::defaultItemRadius[x] && eListbox::defaultItemRadiusEdges[x])
-			setItemCornerRadiusInternal(eListbox::defaultItemRadius[x], eListbox::defaultItemRadiusEdges[x], x);
-		else
-			setItemCornerRadiusInternal(0, 0, x);
-	}
-
 	allowNativeKeys(true);
 }
 
@@ -524,25 +513,6 @@ int eListbox::event(int event, void *data, void *data2)
 			gRegion entryrect = m_orientation == orVertical ? eRect(0, 0, size().width(), m_itemheight) : eRect(0, 0, m_itemwidth, size().height());
 			const gRegion &paint_region = *(gRegion*)data;
 
-			if (!isTransparent())
-			{
-				int cornerRadius = getCornerRadius();
-				int cornerRadiusEdges = getCornerRadiusEdges();
-				painter.clip(paint_region);
-				style->setStyle(painter, eWindowStyle::styleListboxNormal);
-				if (m_style.m_background_color_set)
-					painter.setBackgroundColor(m_style.m_background_color);
-				
-				if (cornerRadius && cornerRadiusEdges)
-				{
-					painter.setRadius(cornerRadius, cornerRadiusEdges);
-					painter.drawRectangle(eRect(ePoint(0, 0), size()));
-				}
-				else
-					painter.clear();
-				painter.clippop();
-			}
-
 			int xoffset = 0;
 			int yoffset = 0;
 			if (m_scrollbar && m_scrollbar_mode == showLeft)
@@ -980,22 +950,3 @@ struct eListboxStyle *eListbox::getLocalStyle(void)
 	m_style.m_transparent_background = isTransparent();
 	return &m_style;
 }
-
-void eListbox::setItemCornerRadiusInternal(int radius, int edges, int index)
-{
-	m_style.m_itemCornerRadius[index] = radius;
-	m_style.m_itemCornerRadiusEdges[index] = edges;
-}
-
-void eListbox::setItemCornerRadius(int radius, int edges)
-{
-	for (int x = 0; x < 2; x++)
-	{
-		setItemCornerRadiusInternal(radius, edges, x);
-	}
-}
-
-void eListbox::setItemCornerRadiusSelected(int radius, int edges)
-{
-	setItemCornerRadiusInternal(radius, edges, 1);
-}
\ No newline at end of file
diff --git a/lib/gui/elistbox.h b/lib/gui/elistbox.h
index 4db62afb7..f7085d4e7 100644
--- a/lib/gui/elistbox.h
+++ b/lib/gui/elistbox.h
@@ -89,16 +89,6 @@ struct eListboxStyle
 	int m_valign, m_halign, m_border_size, m_sliderborder_size, m_scrollbarsliderborder_size;
 	ePtr<gFont> m_font, m_secondfont;
 	ePoint m_text_offset;
-	int m_itemCornerRadius[2];
-	int m_itemCornerRadiusEdges[2];
-	int cornerRadius(int mode)
-	{
-		return m_itemCornerRadius[mode];
-	}
-	int cornerRadiusEdges(int mode)
-	{
-		return m_itemCornerRadiusEdges[mode];
-	}
 };
 #endif
 
@@ -188,20 +178,6 @@ public:
 	int getScrollbarHeight() { return m_scrollbar_height; }
 	int getMaxItemTextWidth() { return m_content->getMaxItemTextWidth(); }
 
-	void setItemCornerRadius(int radius, int edges);
-	void setItemCornerRadiusSelected(int radius, int edges);
-
-	static void setDefaultItemRadius(int radius, int radiusEdges)
-	{
-		defaultItemRadius[0] = radius;
-		defaultItemRadiusEdges[0] = radiusEdges;
-	}
-	static void setDefaultItemRadiusSelected(int radius, int radiusEdges)
-	{
-		defaultItemRadius[1] = radius;
-		defaultItemRadiusEdges[1] = radiusEdges;
-	}
-
 #ifndef SWIG
 	struct eListboxStyle *getLocalStyle(void);
 
@@ -233,7 +209,6 @@ private:
 	int m_orientation;
 	int m_items_per_page;
 	int m_selection_enabled;
-	void setItemCornerRadiusInternal(int radius, int edges, int index);
 
 	bool m_native_keys_bound;
 
@@ -241,8 +216,6 @@ private:
 	eSlider *m_scrollbar;
 	eListboxStyle m_style;
 	ePtr<gPixmap> m_scrollbarpixmap, m_scrollbarbackgroundpixmap;
-	static int defaultItemRadius[2];
-	static int defaultItemRadiusEdges[2];
 #endif
 };
 
diff --git a/lib/gui/elistboxcontent.cpp b/lib/gui/elistboxcontent.cpp
index 900237d2b..4e96e7c04 100644
--- a/lib/gui/elistboxcontent.cpp
+++ b/lib/gui/elistboxcontent.cpp
@@ -3,7 +3,6 @@
 #include <lib/gdi/font.h>
 #include <lib/python/python.h>
 #include <lib/gdi/epng.h>
-#include <lib/gui/ewindowstyleskinned.h>
 /*
     The basic idea is to have an interface which gives all relevant list
     processing functions, and can be used by the listbox to browse trough
@@ -179,16 +178,13 @@ int eListboxPythonStringContent::getMaxItemTextWidth()
 void eListboxPythonStringContent::paint(gPainter &painter, eWindowStyle &style, const ePoint &offset, int selected)
 {
 	ePtr<gFont> fnt;
-	eRect itemRect(offset, m_itemsize);
-	painter.clip(itemRect);
+	painter.clip(eRect(offset, m_itemsize));
 	style.setStyle(painter, selected ? eWindowStyle::styleListboxSelected : eWindowStyle::styleListboxNormal);
 	bool validitem = (m_list && cursorValid());
 	eListboxStyle *local_style = 0;
 	bool cursorValid = this->cursorValid();
 	gRGB border_color;
 	int border_size = 0;
-	int radius = 0;
-	int edges = 0;
 
 		/* get local listbox style, if present */
 	if (m_listbox)
@@ -198,8 +194,6 @@ void eListboxPythonStringContent::paint(gPainter &painter, eWindowStyle &style,
 	{
 		border_size = local_style->m_border_size;
 		border_color = local_style->m_border_color;
-		radius = local_style->cornerRadius(selected ? 1:0);
-		edges = local_style->cornerRadiusEdges(selected ? 1:0);
 		fnt = local_style->m_font;
 		if (selected)
 		{
@@ -234,12 +228,6 @@ void eListboxPythonStringContent::paint(gPainter &painter, eWindowStyle &style,
 				if (validitem) painter.blit(local_style->m_background, ePoint(offset.x() + (m_itemsize.width() - local_style->m_background->size().width()) / 2, offset.y()), eRect(), 0);
 			}
 		}
-		else if (local_style && !local_style->m_background && cursorValid && radius)
-		{
-			if(radius)
-				painter.setRadius(radius, edges);
-			painter.drawRectangle(itemRect);
-		}
 		else
 			painter.clear();
 	} else
@@ -252,7 +240,7 @@ void eListboxPythonStringContent::paint(gPainter &painter, eWindowStyle &style,
 				if (validitem) painter.blit(local_style->m_background, ePoint(offset.x() + (m_itemsize.width() - local_style->m_background->size().width()) / 2, offset.y()), eRect(), gPainter::BT_ALPHATEST);
 			}
 		}
-		else if (selected && !local_style->m_selection && cursorValid && !radius && !local_style->m_background)
+		else if (selected && !local_style->m_selection)
 			painter.clear();
 	}
 
@@ -281,11 +269,6 @@ void eListboxPythonStringContent::paint(gPainter &painter, eWindowStyle &style,
 			else
 				painter.blit(local_style->m_selection, ePoint(offset.x() + (m_itemsize.width() - local_style->m_selection->size().width()) / 2, offset.y()), eRect(), gPainter::BT_ALPHATEST);
 		}
-		else if (selected && local_style && radius && !local_style->m_selection) {
-			if(radius)
-				painter.setRadius(radius, edges);
-			painter.drawRectangle(itemRect);
-		}
 
 		if (item == Py_None)
 		{
@@ -418,8 +401,6 @@ void eListboxPythonConfigContent::paint(gPainter &painter, eWindowStyle &style,
 	bool cursorValid = this->cursorValid();
 	gRGB border_color;
 	int border_size = 0;
-	int radius = 0;
-	int edges = 0;
 
 	painter.clip(itemrect);
 	style.setStyle(painter, selected ? eWindowStyle::styleListboxSelected : eWindowStyle::styleListboxNormal);
@@ -434,8 +415,6 @@ void eListboxPythonConfigContent::paint(gPainter &painter, eWindowStyle &style,
 		border_color = local_style->m_border_color;
 		fnt = local_style->m_font;
 		fnt2 = local_style->m_secondfont;
-		radius = local_style->cornerRadius(selected ? 1:0);
-		edges = local_style->cornerRadiusEdges(selected ? 1:0);
 		if (selected)
 		{
 			/* if we have a local background color set, use that. */
@@ -465,18 +444,11 @@ void eListboxPythonConfigContent::paint(gPainter &painter, eWindowStyle &style,
 		/* if we have no transparent background */
 	{
 		/* blit background picture, if available (otherwise, clear only) */
-		if (local_style && local_style->m_background && cursorValid) {
+		if (local_style && local_style->m_background && cursorValid)
 			if (m_listbox && m_listbox->getOrientation() == 1)
 				painter.blit(local_style->m_background, ePoint(offset.x(), offset.y() + (m_itemsize.height() - local_style->m_background->size().height()) / 2), eRect(), 0);
 			else
 				painter.blit(local_style->m_background, ePoint(offset.x() + (m_itemsize.width() - local_style->m_background->size().width()) / 2, offset.y()), eRect(), 0);
-		}
-		else if (local_style && !local_style->m_background && cursorValid && radius)
-		{
-			if(radius)
-				painter.setRadius(radius, edges);
-			painter.drawRectangle(itemrect);
-		}
 		else
 			painter.clear();
 	} else
@@ -486,7 +458,7 @@ void eListboxPythonConfigContent::paint(gPainter &painter, eWindowStyle &style,
 				painter.blit(local_style->m_background, ePoint(offset.x(), offset.y() + (m_itemsize.height() - local_style->m_background->size().height()) / 2), eRect(), gPainter::BT_ALPHATEST);
 			else
 				painter.blit(local_style->m_background, ePoint(offset.x() + (m_itemsize.width() - local_style->m_background->size().width()) / 2, offset.y()), eRect(), gPainter::BT_ALPHATEST);
-		else if (selected && !local_style->m_selection && !radius)
+		else if (selected && !local_style->m_selection)
 			painter.clear();
 	}
 
@@ -506,10 +478,6 @@ void eListboxPythonConfigContent::paint(gPainter &painter, eWindowStyle &style,
 				painter.blit(local_style->m_selection, ePoint(offset.x(), offset.y() + (m_itemsize.height() - local_style->m_selection->size().height()) / 2), eRect(), gPainter::BT_ALPHATEST);
 			else
 				painter.blit(local_style->m_selection, ePoint(offset.x() + (m_itemsize.width() - local_style->m_selection->size().width()) / 2, offset.y()), eRect(), gPainter::BT_ALPHATEST);
-		} else if (selected && radius && !local_style->m_selection) {
-			if(radius)
-				painter.setRadius(radius, edges);
-			painter.drawRectangle(itemrect);
 		}
 			/* the first tuple element is a string for the left side.
 			   the second one will be called, and the result shall be an tuple.
@@ -1031,8 +999,7 @@ int eListboxPythonMultiContent::getMaxItemTextWidth()
 
 void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, const ePoint &offset, int selected)
 {
-	eRect itemRect = eRect(offset, m_itemsize);
-	gRegion itemregion(itemRect);
+	gRegion itemregion(eRect(offset, m_itemsize));
 	eListboxStyle *local_style = 0;
 	eRect sel_clip(m_selection_clip);
 	bool cursorValid = this->cursorValid();
@@ -1053,28 +1020,8 @@ void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, c
 	}
 	
 	painter.clip(itemregion);
-
-	if(local_style) {
-		int mode = (selected) ? 1:0;
-		int radius = local_style->cornerRadius(mode);
-		int edges = local_style->cornerRadiusEdges(mode);
-		if (radius) {
-			gRGB color = style.getColor(selected ? eWindowStyleSkinned::colListboxSelectedBackground : eWindowStyleSkinned::colListboxBackground);;
-			if (selected && local_style->m_background_color_selected_set)
-				color = local_style->m_background_color_selected;
-			if (!selected && local_style->m_background_color_set)
-				color = local_style->m_background_color;
-
-			painter.setRadius(radius, edges);
-			painter.setBackgroundColor(gRGB(color));
-			painter.drawRectangle(itemRect);
-		}
-		else
-			clearRegion(painter, style, local_style, ePyObject(), ePyObject(), ePyObject(), ePyObject(), selected, itemregion, sel_clip, offset, m_itemsize, cursorValid, true, isverticallb);
-	}
-	else
-		clearRegion(painter, style, local_style, ePyObject(), ePyObject(), ePyObject(), ePyObject(), selected, itemregion, sel_clip, offset, m_itemsize, cursorValid, true, isverticallb);
-
+	clearRegion(painter, style, local_style, ePyObject(), ePyObject(), ePyObject(), ePyObject(), selected, itemregion, sel_clip, offset, m_itemsize, cursorValid, true, isverticallb);
+	
 	// Draw frame here so to be under the content
 	if (selected && !sel_clip.valid() && (!local_style || !local_style->m_selection) && (!local_style || !local_style->m_border_set))
 			style.drawFrame(painter, eRect(offset, m_itemsize), eWindowStyle::frameListboxEntry);
@@ -1180,7 +1127,7 @@ void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, c
 							pfnt = PyTuple_GET_ITEM(item, 5),
 							pflags = PyTuple_GET_ITEM(item, 6),
 							pstring = PyTuple_GET_ITEM(item, 7),
-							pforeColor, pforeColorSelected, pbackColor, pbackColorSelected, pborderWidth, pborderColor, pCornerRadius, pCornerEdges;
+							pforeColor, pforeColorSelected, pbackColor, pbackColorSelected, pborderWidth, pborderColor;
 
 				if (!(px && py && pwidth && pheight && pfnt && pflags && pstring))
 				{
@@ -1209,12 +1156,6 @@ void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, c
 				if (size > 13)
 					pborderColor = lookupColor(PyTuple_GET_ITEM(item, 13), data);
 
-				if (size > 14)
-					pCornerRadius = PyTuple_GET_ITEM(item, 14);
-
-				if (size > 15)
-					pCornerEdges = PyTuple_GET_ITEM(item, 15);
-
 				if (PyLong_Check(pstring) && data) /* if the string is in fact a number, it refers to the 'data' list. */
 					pstring = PyTuple_GetItem(data, PyLong_AsLong(pstring));
 
@@ -1231,11 +1172,6 @@ void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, c
 				int fnt = PyLong_AsLong(pfnt);
 				int bwidth = pborderWidth ? PyLong_AsLong(pborderWidth) : 0;
 
-				int cornerRadius = pCornerRadius ? PyLong_AsLong(pCornerRadius) : 0;
-				int cornerEdges = pCornerEdges ? PyLong_AsLong(pCornerEdges) : 0;
-				if (cornerRadius || cornerEdges)
-					bwidth = 0; // border not supported for rounded edges
-
 				if (m_font.find(fnt) == m_font.end())
 				{
 					eDebug("[eListboxPythonMultiContent] specified font %d was not found!", fnt);
@@ -1246,21 +1182,9 @@ void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, c
 				painter.clip(rect);
 
 				{
-					if(cornerRadius && (pbackColor || pbackColorSelected))
-					{
-						if(selected && !pbackColorSelected)
-							pbackColorSelected = pbackColor;
-						unsigned int color = PyLong_AsUnsignedLongMask(selected ? pbackColorSelected : pbackColor);
-						painter.setBackgroundColor(gRGB(color));
-						painter.setRadius(cornerRadius, cornerEdges);
-						painter.drawRectangle(itemRect);
-					}
-					else 
-					{
-						gRegion rc(rect);
-						bool mustClear = (selected && pbackColorSelected) || (!selected && pbackColor);
-						clearRegion(painter, style, local_style, pforeColor, pforeColorSelected, pbackColor, pbackColorSelected, selected, rc, sel_clip, offset, m_itemsize, cursorValid, mustClear, isverticallb);
-					}
+					gRegion rc(rect);
+					bool mustClear = (selected && pbackColorSelected) || (!selected && pbackColor);
+					clearRegion(painter, style, local_style, pforeColor, pforeColorSelected, pbackColor, pbackColorSelected, selected, rc, sel_clip, offset, m_itemsize, cursorValid, mustClear, isverticallb);
 				}
 
 				painter.setFont(m_font[fnt]);
@@ -1268,7 +1192,7 @@ void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, c
 				painter.clippop();
 
 				// draw border
-				if (bwidth && cornerRadius == 0)
+				if (bwidth)
 				{
 					eRect rect(eRect(x, y, width, height));
 					painter.clip(rect);
@@ -1456,8 +1380,6 @@ void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, c
 				int width = PyLong_AsLong(pwidth);
 				int height = PyLong_AsLong(pheight);
 				int flags = 0;
-				int radius = 0;
-				int edges = 0;
 				ePtr<gPixmap> pixmap;
 				if (SwigFromPython(pixmap, ppixmap))
 				{
@@ -1474,12 +1396,6 @@ void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, c
 				if (size > 8)
 					flags = PyLong_AsLong(PyTuple_GET_ITEM(item, 8));
 
-				if (size > 9)
-					radius = PyLong_AsLong(PyTuple_GET_ITEM(item, 9));
-
-				if (size > 10)
-					edges = PyLong_AsLong(PyTuple_GET_ITEM(item, 10));
-
 				eRect rect(x, y, width, height);
 				painter.clip(rect);
 
@@ -1489,8 +1405,6 @@ void eListboxPythonMultiContent::paint(gPainter &painter, eWindowStyle &style, c
 					clearRegion(painter, style, local_style, ePyObject(), ePyObject(), pbackColor, pbackColorSelected, selected, rc, sel_clip, offset, m_itemsize, cursorValid, mustClear, isverticallb);
 				}
 				flags |= (type == TYPE_PIXMAP_ALPHATEST) ? gPainter::BT_ALPHATEST : (type == TYPE_PIXMAP_ALPHABLEND) ? gPainter::BT_ALPHABLEND : 0;
-				if(radius && edges)
-					painter.setRadius(radius, edges);
 				painter.blit(pixmap, rect, rect, flags);
 				painter.clippop();
 				break;
diff --git a/lib/gui/elistboxcontent.h b/lib/gui/elistboxcontent.h
index 25f0031bc..9b83413ef 100644
--- a/lib/gui/elistboxcontent.h
+++ b/lib/gui/elistboxcontent.h
@@ -110,8 +110,6 @@ private:
 #define RT_VALIGN_CENTER 16
 #define RT_VALIGN_BOTTOM 32
 #define RT_WRAP 64
-#define RT_ELLIPSIS 128
-#define RT_BLEND 256
 #define BT_ALPHATEST 1
 #define BT_ALPHABLEND 2
 #define BT_SCALE 4
@@ -125,16 +123,6 @@ private:
 #define BT_VALIGN_BOTTOM 128
 #define BT_ALIGN_CENTER BT_HALIGN_CENTER | BT_VALIGN_CENTER
 
-#define RADIUS_TOP_LEFT 1
-#define RADIUS_TOP_RIGHT 2
-#define RADIUS_TOP 3
-#define RADIUS_BOTTOM_LEFT 4
-#define RADIUS_BOTTOM_RIGHT 8
-#define RADIUS_BOTTOM 12
-#define RADIUS_LEFT 5
-#define RADIUS_RIGHT 10
-#define RADIUS_ALL RADIUS_TOP | RADIUS_BOTTOM
-
 #endif // SWIG
 
 #endif
diff --git a/lib/gui/eslider.cpp b/lib/gui/eslider.cpp
index 7ca1e6c38..b59f53654 100644
--- a/lib/gui/eslider.cpp
+++ b/lib/gui/eslider.cpp
@@ -1,7 +1,8 @@
 #include <lib/gui/eslider.h>
 
 eSlider::eSlider(eWidget *parent)
-	:eWidget(parent), m_have_border_color(false), m_have_foreground_color(false), m_have_background_color(false),
+	:eWidget(parent), m_have_border_color(false), m_have_foreground_color(false),
+	m_have_sliderborder_color(false), m_have_sliderforeground_color(false), m_have_sliderborder_width(false),
 	m_min(0), m_max(0), m_value(0), m_start(0), m_orientation(orHorizontal), m_orientation_swapped(0),
 	m_border_width(0), m_sliderborder_width(0)
 {
@@ -54,13 +55,6 @@ void eSlider::setForegroundColor(const gRGB &color)
 	invalidate();
 }
 
-void eSlider::setBackgroundColor(const gRGB &col)
-{
-	m_background_color = col;
-	m_have_background_color = true;
-	invalidate();
-}
-
 void eSlider::setSliderBorderWidth(int pixel)
 {
 	m_sliderborder_width = pixel;
@@ -92,100 +86,45 @@ int eSlider::event(int event, void *data, void *data2)
 
 		eSize s(size());
 		getStyle(style);
-		/* paint background */
-		int cornerRadius = getCornerRadius();
-		if(!cornerRadius) // don't call eWidget paint if radius or gradient
-			eWidget::event(evtPaint, data, data2);
+			/* paint background */
+		eWidget::event(evtPaint, data, data2);
 
 		gPainter &painter = *(gPainter*)data2;
 
-		bool drawborder = (m_have_border_color && m_border_width);
-
+		style->setStyle(painter, eWindowStyle::styleLabel); // TODO - own style
 
 		if (m_backgroundpixmap)
 		{
-			if (cornerRadius)
-				painter.setRadius(cornerRadius, getCornerRadiusEdges());
-			painter.blit(m_backgroundpixmap, ePoint(0, 0), eRect(), isTransparent() ? gPainter::BT_ALPHABLEND : 0);
-		} else if(m_have_background_color && !cornerRadius) {
-			painter.setBackgroundColor(m_background_color);
-			painter.clear();
+			painter.blit(m_backgroundpixmap, ePoint(0, 0), eRect(), isTransparent() ? gPainter::BT_ALPHATEST : 0);
 		}
 
-		if(cornerRadius)
-		{
-			if(m_have_background_color) {
-				painter.setBackgroundColor(m_background_color);
-			} 
-			painter.setRadius(cornerRadius, getCornerRadiusEdges());
-
-			if (drawborder)
-			{
-				if (m_have_border_color)
-					painter.setBackgroundColor(m_border_color);
-				else
-				{
-					gRGB color = style->getColor(eWindowStyle::styleLabel);
-					painter.setBackgroundColor(color);
-				}
-				painter.drawRectangle(eRect(ePoint(0, 0), size()));
- 				painter.setBackgroundColor((m_have_background_color) ? m_background_color : gRGB(0, 0, 0));
-				painter.setRadius(cornerRadius, getCornerRadiusEdges());
-				painter.drawRectangle(eRect(m_border_width, m_border_width, size().width() - m_border_width * 2, size().height() - m_border_width * 2));
-				drawborder = false;
-			}
-			else {
-				painter.drawRectangle(eRect(ePoint(0, 0), size()));
-			}
-		}
-
-		style->setStyle(painter, eWindowStyle::styleLabel); // TODO - own style
-
 		if (!m_pixmap)
 		{
-			if (cornerRadius)
-			{
-				if (m_have_foreground_color)
-					painter.setBackgroundColor(m_foreground_color);
-				painter.setRadius(cornerRadius, getCornerRadiusEdges());
-				eRect rect = eRect(m_currently_filled.extends);
-				if (m_orientation == orHorizontal)
-					rect.setHeight(size().height()-m_border_width*2);
-				else
-					rect.setWidth(size().width()-m_border_width*2);
-				painter.drawRectangle(rect);
-			}
-			else {
-				if (m_have_sliderforeground_color)
-				    painter.setForegroundColor(m_sliderforeground_color);
-			    else if (m_have_foreground_color)
+			if (m_have_sliderforeground_color)
+				painter.setForegroundColor(m_sliderforeground_color);
+			else if (m_have_foreground_color)
 				painter.setForegroundColor(m_foreground_color);
-                    painter.fill(m_currently_filled);
-			}
+			painter.fill(m_currently_filled);
 		}
-		else {
+		else
+			painter.blit(m_pixmap, ePoint(0, 0), m_currently_filled.extends, isTransparent() ? gPainter::BT_ALPHATEST : 0);
 
-			if (cornerRadius)
-				painter.setRadius(cornerRadius, getCornerRadiusEdges());
-			painter.blit(m_pixmap, ePoint(0, 0), m_currently_filled.extends, isTransparent() ? gPainter::BT_ALPHABLEND : 0);
-		}
-        // border
-        if(drawborder) {
-		    if (m_have_sliderborder_color)
-			    painter.setForegroundColor(m_sliderborder_color);
-		    else if (m_have_border_color)
-			    painter.setForegroundColor(m_border_color);
-
-		    int border_width;
-		    if(m_have_sliderborder_width)
-			    border_width = m_sliderborder_width;
-		    else
-			    border_width = m_border_width;
-		    painter.fill(eRect(0, 0, s.width(), border_width));
-		    painter.fill(eRect(0, border_width, border_width, s.height() - border_width));
-		    painter.fill(eRect(border_width, s.height() - border_width, s.width() - border_width, border_width));
-            painter.fill(eRect(s.width() - border_width, border_width, border_width, s.height() - border_width));
-		}
+// border
+
+		if (m_have_sliderborder_color)
+			painter.setForegroundColor(m_sliderborder_color);
+		else if (m_have_border_color)
+			painter.setForegroundColor(m_border_color);
+
+		int border_width;
+		if(m_have_sliderborder_width)
+			border_width = m_sliderborder_width;
+		else
+			border_width = m_border_width;
+		painter.fill(eRect(0, 0, s.width(), border_width));
+		painter.fill(eRect(0, border_width, border_width, s.height() - border_width));
+		painter.fill(eRect(border_width, s.height() - border_width, s.width() - border_width, border_width));
+		painter.fill(eRect(s.width() - border_width, border_width, border_width, s.height() - border_width));
 
 		return 0;
 	}
@@ -216,24 +155,14 @@ int eSlider::event(int event, void *data, void *data2)
 			num_pix = 0;
 
 		if (m_orientation == orHorizontal)
-			m_currently_filled = eRect(start_pix + m_border_width, m_border_width, num_pix, pixsize);
+			m_currently_filled = eRect(start_pix, 0, num_pix, pixsize);
 		else
-			m_currently_filled = eRect(m_border_width, start_pix + m_border_width, pixsize, num_pix);
-
-		const int cornerRadius = getCornerRadius();
+			m_currently_filled = eRect(0, start_pix, pixsize, num_pix);
 
-		if (cornerRadius)
-		{
-			invalidate(old_currently_filled);
-			invalidate(m_currently_filled);
-		}
-		else
-		{
 			// redraw what *was* filled before and now isn't.
-			invalidate(m_currently_filled - old_currently_filled);
+		invalidate(m_currently_filled - old_currently_filled);
 			// redraw what wasn't filled before and is now.
-			invalidate(old_currently_filled - m_currently_filled);
-		}
+		invalidate(old_currently_filled - m_currently_filled);
 
 		return 0;
 	}
diff --git a/lib/gui/eslider.h b/lib/gui/eslider.h
index 3d27462c6..496b25daa 100644
--- a/lib/gui/eslider.h
+++ b/lib/gui/eslider.h
@@ -15,7 +15,6 @@ public:
 	void setBorderWidth(int pixel);
 	void setBorderColor(const gRGB &color);
 	void setForegroundColor(const gRGB &color);
-	void setBackgroundColor(const gRGB &col) override;
 	void setPixmap(gPixmap *pixmap);
 	void setPixmap(ePtr<gPixmap> &pixmap);
 	void setBackgroundPixmap(gPixmap *pixmap);
@@ -31,13 +30,13 @@ private:
 	{
 		evtChangedSlider = evtUserWidget
 	};
-	bool m_have_border_color, m_have_foreground_color, m_have_background_color;
+	bool m_have_border_color, m_have_foreground_color;
 	bool m_have_sliderborder_color, m_have_sliderforeground_color, m_have_sliderborder_width;
 	int m_min, m_max, m_value, m_start, m_orientation, m_orientation_swapped, m_border_width, m_sliderborder_width;
 	ePtr<gPixmap> m_pixmap, m_backgroundpixmap;
 
 	gRegion m_currently_filled;
-	gRGB m_border_color, m_foreground_color, m_background_color;
+	gRGB m_border_color, m_foreground_color;
 	gRGB m_sliderborder_color, m_sliderforeground_color;
 };
 
diff --git a/lib/gui/ewidget.h b/lib/gui/ewidget.h
index 67aedb526..963d31141 100644
--- a/lib/gui/ewidget.h
+++ b/lib/gui/ewidget.h
@@ -45,7 +45,7 @@ public:
 	SWIG_VOID(int) getStyle(ePtr<eWindowStyle> &SWIG_NAMED_OUTPUT(style)) { if (!m_style) return 1; style = m_style; return 0; }
 	void setStyle(eWindowStyle *style) { m_style = style; }
 
-	virtual void setBackgroundColor(const gRGB &col);
+	void setBackgroundColor(const gRGB &col);
 	void clearBackgroundColor();
 
 	void setBorderWidth(int pixel);
diff --git a/lib/gui/ewindowstyle.cpp b/lib/gui/ewindowstyle.cpp
index 0c4a681f9..9392592dc 100644
--- a/lib/gui/ewindowstyle.cpp
+++ b/lib/gui/ewindowstyle.cpp
@@ -127,11 +127,6 @@ void eWindowStyleSimple::setStyle(gPainter &painter, int what)
 	}
 }
 
-gRGB eWindowStyleSimple::getColor(int what)
-{
-	return nullptr;
-}
-
 void eWindowStyleSimple::drawFrame(gPainter &painter, const eRect &frame, int what)
 {
 	gColor c1, c2;
diff --git a/lib/gui/ewindowstyle.h b/lib/gui/ewindowstyle.h
index b09d489f3..919dd15cd 100644
--- a/lib/gui/ewindowstyle.h
+++ b/lib/gui/ewindowstyle.h
@@ -48,7 +48,6 @@ public:
 	virtual void setStyle(gPainter &painter, int what) = 0;
 	virtual void drawFrame(gPainter &painter, const eRect &frame, int type) = 0;
 	virtual RESULT getFont(int what, ePtr<gFont> &font) = 0;
-	virtual gRGB getColor(int what) = 0;
 #endif
 	virtual ~eWindowStyle() = 0;
 };
@@ -99,7 +98,6 @@ public:
 	void setStyle(gPainter &painter, int what);
 	void drawFrame(gPainter &painter, const eRect &frame, int what);
 	RESULT getFont(int what, ePtr<gFont> &font);
-	gRGB getColor(int what);
 };
 #endif
 
diff --git a/lib/gui/ewindowstyleskinned.cpp b/lib/gui/ewindowstyleskinned.cpp
index d07259f74..ae47311a6 100644
--- a/lib/gui/ewindowstyleskinned.cpp
+++ b/lib/gui/ewindowstyleskinned.cpp
@@ -268,13 +268,6 @@ void eWindowStyleSkinned::setColor(int what, const gRGB &col)
 		m_color[what] = col;
 }
 
-gRGB eWindowStyleSkinned::getColor(int what)
-{
-	if ((what < colMax) && (what >= 0))
-		return m_color[what];
-	return nullptr;
-}
-
 void eWindowStyleSkinned::setTitleOffset(const eSize &offset)
 {
 	m_title_offset = offset;
diff --git a/lib/gui/ewindowstyleskinned.h b/lib/gui/ewindowstyleskinned.h
index 707b9a064..a6cdb891d 100644
--- a/lib/gui/ewindowstyleskinned.h
+++ b/lib/gui/ewindowstyleskinned.h
@@ -73,7 +73,6 @@ public:
 	};
 
 	void setColor(int what, const gRGB &back);
-	gRGB getColor(int what);
 
 	void setTitleOffset(const eSize &offset);
 	void setTitleFont(gFont *fnt);
diff --git a/lib/python/skin.py b/lib/python/skin.py
index 596b03055..017d7b16c 100644
--- a/lib/python/skin.py
+++ b/lib/python/skin.py
@@ -534,14 +534,6 @@ class AttributeParser:
 	def itemWidth(self, value):
 		self.guiObject.setItemWidth(parseScale(value))
 
-	def itemCornerRadius(self, value):
-		radius, edgeValue = parseRadius(value)
-		self.guiObject.setItemCornerRadius(radius, edgeValue)
-
-	def itemCornerRadiusSelected(self, value):
-		radius, edgeValue = parseRadius(value)
-		self.guiObject.setItemCornerRadiusSelected(radius, edgeValue)
-
 	def pixmap(self, value):
 		if value.endswith(".svg"): # if graphic is svg force alphatest to "blend"
 			self.guiObject.setAlphatest(BT_ALPHABLEND)
diff --git a/lib/service/listboxservice.cpp b/lib/service/listboxservice.cpp
index a3eed7ce5..f67cfdf4b 100644
--- a/lib/service/listboxservice.cpp
+++ b/lib/service/listboxservice.cpp
@@ -715,19 +715,11 @@ void eListboxServiceContent::paint(gPainter &painter, eWindowStyle &style, const
 		style.setStyle(painter, selected ? eWindowStyle::styleListboxSelected : eWindowStyle::styleListboxNormal);
 
 	eListboxStyle *local_style = 0;
-	eRect itemRect = eRect(offset, m_itemsize);
-	int radius = 0;
-	int edges = 0;
 
 		/* get local listbox style, if present */
 	if (m_listbox)
 		local_style = m_listbox->getLocalStyle();
 
-	if (local_style) {
-		radius = local_style->cornerRadius(selected ? 1:0);
-		edges = local_style->cornerRadiusEdges(selected ? 1:0);
-	}
-
 	if (marked == 1)  // marked
 	{
 		style.setStyle(painter, eWindowStyle::styleListboxMarked);
@@ -772,19 +764,13 @@ void eListboxServiceContent::paint(gPainter &painter, eWindowStyle &style, const
 		/* blit background picture, if available (otherwise, clear only) */
 		if (local_style && local_style->m_background)
 			painter.blit(local_style->m_background, offset, eRect(), 0);
-		else if (local_style && !local_style->m_background && radius)
-		{
-			if(radius)
-				painter.setRadius(radius, edges);
-			painter.drawRectangle(itemRect);
-		}
 		else
 			painter.clear();
 	} else
 	{
 		if (local_style->m_background)
 			painter.blit(local_style->m_background, offset, eRect(), gPainter::BT_ALPHABLEND);
-		else if (selected && !local_style->m_selection && !local_style->m_selection_large && !radius)
+		else if (selected && !local_style->m_selection && !local_style->m_selection_large)
 			painter.clear();
 	}
 
@@ -798,8 +784,8 @@ void eListboxServiceContent::paint(gPainter &painter, eWindowStyle &style, const
 		}
 
 		// Draw the frame for selected item here so to be under the content
-		if (selected && (!local_style || (!local_style->m_selection && !local_style->m_selection_large)) && !radius)
-			style.drawFrame(painter, itemRect, eWindowStyle::frameListboxEntry);
+		if (selected && (!local_style || (!local_style->m_selection && !local_style->m_selection_large)))
+			style.drawFrame(painter, eRect(offset, m_itemsize), eWindowStyle::frameListboxEntry);
 
 		eServiceReference ref = *m_cursor;
 		std::string orig_ref_str = ref.toString();
