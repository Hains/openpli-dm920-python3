--- python-daap-0.7.1/daap.py	2007-09-10 20:35:45.000000000 +0200
+++ python-daap-0.7.1/daap.py	2010-11-03 19:39:09.000000000 +0100
@@ -417,18 +417,21 @@
         # this returns an HTTP response object
         response    = self._get_response(r, params)
         status = response.status
-        content = response.read()
-        # if we got gzipped data base, gunzip it.
-        if response.getheader("Content-Encoding") == "gzip":
-            log.debug("gunzipping data")
-            old_len = len(content)
-            compressedstream = StringIO( content )
-            gunzipper = gzip.GzipFile(fileobj=compressedstream)
-            content = gunzipper.read()
-            log.debug("expanded from %s bytes to %s bytes", old_len, len(content))
-        # close this, we're done with it
+	#Dr.Best --> fix 
+	if status == 200:
+		content = response.read()
+		# if we got gzipped data base, gunzip it.
+		if response.getheader("Content-Encoding") == "gzip":
+		    log.debug("gunzipping data")
+		    old_len = len(content)
+		    compressedstream = StringIO( content )
+		    gunzipper = gzip.GzipFile(fileobj=compressedstream)
+		    content = gunzipper.read()
+		    log.debug("expanded from %s bytes to %s bytes", old_len, len(content))
+	# close this, we're done with it
         response.close()
 
+
         if status == 401:
             raise DAAPError('DAAPClient: %s: auth required'%r)
         elif status == 403:
@@ -511,7 +514,7 @@
 # the atoms we want. Making this list smaller reduces memory footprint,
 # and speeds up reading large libraries. It also reduces the metainformation
 # available to the client.
-daap_atoms = "dmap.itemid,dmap.itemname,daap.songalbum,daap.songartist,daap.songformat,daap.songtime,daap.songsize,daap.songgenre,daap.songyear,daap.songtracknumber"
+daap_atoms = "dmap.itemid,dmap.itemname,daap.songalbum,daap.songartist,daap.songformat,daap.songtime,daap.songsize,daap.songgenre,daap.songyear,daap.songtracknumber,daap.songtrackcount,daap.songbitrate"
 
 class DAAPDatabase(object):
 
@@ -560,7 +563,12 @@
         'id':'miid',
         'type':'asfm',
         'time':'astm',
-        'size':'assz'}
+        'size':'assz',
+        'year':'asyr',
+        'genre':'asgn',
+	'tracknr': 'astn',
+	'trackcount': 'astc',
+	'bitrate': 'asbr'}
 
     def __init__(self, database, atom):
         self.database = database
