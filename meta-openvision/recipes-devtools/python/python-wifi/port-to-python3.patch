diff --git a/pythonwifi/iwlibs.py b/pythonwifi/iwlibs.py
index 513d310..6413827 100644
--- a/pythonwifi/iwlibs.py
+++ b/pythonwifi/iwlibs.py
@@ -32,7 +32,6 @@ import time
 import re
 
 import pythonwifi.flags
-from types import StringType, IntType, TupleType
 
 
 KILO = 10**3
@@ -96,7 +95,7 @@ def getConfiguredWNICnames():
     """
     iwstruct = Iwstruct()
     ifnames = []
-    buff = array.array('c', '\0'*1024)
+    buff = array.array('B', b'\0'*1024)
     caddr_t, length = buff.buffer_info()
     datastr = iwstruct.pack('iP', length, caddr_t)
     result = iwstruct._fcntl(pythonwifi.flags.SIOCGIFCONF, datastr)
@@ -104,13 +103,14 @@ def getConfiguredWNICnames():
     for i in range(0, 1024, 32):
         ifname = buff.tostring()[i:i+32]
         ifname = struct.unpack('32s', ifname)[0]
-        ifname = ifname.split('\0', 1)[0]
+        ifname = ifname.split(b'\0', 1)[0]
         if ifname:
             # verify if ifnames are really wifi devices
             wifi = Wireless(ifname)
             try:
                 result = wifi.getAPaddr()
-            except IOError, (errno, strerror):
+            except IOError as e:
+                errno = e.args
                 # don't stop on an individual error
                 pass
             if result[0] == 0:
@@ -526,7 +526,7 @@ class Wireless(object):
         mode = mode.lower()
         try:
             wifimode = this_modes.index(mode)
-        except ValueError, detail:
+        except ValueError as detail:
             raise ValueError("Invalid mode")
         datastr = self.iwstruct.pack('I', wifimode)
         status, result = self.iwstruct.iw_set_ext(self.ifname,
@@ -999,7 +999,7 @@ class Iwstruct(object):
         # ioctl itself looks for the pointer to the address in our
         # memory and the size of it.
         # Don't change the order how the structure is packed!!!
-        buff = array.array('c', '\0'*buffsize)
+        buff = array.array('B', b'\0'*buffsize)
         caddr_t, length = buff.buffer_info()
         datastr = struct.pack('Pi', caddr_t, length)
         return buff, datastr
@@ -1007,7 +1007,7 @@ class Iwstruct(object):
     def pack_test(self, string, buffsize):
         """ Packs wireless request data for sending it to the kernel. """
         buffsize = buffsize - len(string)
-        buff = array.array('c', string+'\0'*buffsize)
+        buff = array.array('B', string+b'\0'*buffsize)
         caddr_t, length = buff.buffer_info()
         s = struct.pack('PHH', caddr_t, length, 1)
         return buff, s
@@ -1022,7 +1022,7 @@ class Iwstruct(object):
     def iw_get_ext(self, ifname, request, data=None):
         """ Read information from ifname. """
         buff = pythonwifi.flags.IFNAMSIZE-len(ifname)
-        ifreq = array.array('c', ifname + '\0'*buff)
+        ifreq = array.array('B', ifname + b'\0'*buff)
         # put some additional data behind the interface name
         if data is not None:
             ifreq.extend(data)
@@ -1214,11 +1214,11 @@ class Iwpoint(object):
 
     def __init__(self, data=None, flags=0):
         if data is None:
-            raise ValueError, "data must be passed to Iwpoint"
+            raise ValueError("data must be passed to Iwpoint")
         # P pointer to data, H length, H flags
         self.fmt = 'PHH'
         self.flags = flags
-        self.buff = array.array('c', data)
+        self.buff = array.array('B', data)
         self.caddr_t, self.length = self.buff.buffer_info()
         self.packed_data = struct.pack(self.fmt, self.caddr_t,
                                        self.length, self.flags)
@@ -1420,7 +1420,8 @@ class Iwscan(object):
                 status, result = iwstruct.iw_get_ext(self.ifname,
                                                 pythonwifi.flags.SIOCGIWSCAN,
                                                 data=datastr)
-            except IOError, (error_number, error_string):
+            except IOError as e:
+                (error_number, error_string) = e.args
                 if error_number == errno.E2BIG:
                     # Keep resizing the buffer until it's
                     #   large enough to hold the scan
@@ -1486,7 +1487,7 @@ class Iwscan(object):
             if scanresult.bssid != "00:00:00:00:00:00":
                 aplist.append(scanresult)
             else:
-                raise RuntimeError, 'Attempting to add an AP without a bssid'
+                raise RuntimeError('Attempting to add an AP without a bssid')
         return aplist
 
 
@@ -1568,18 +1569,18 @@ class Iwscanresult(object):
                               This command is not allowed.")
 
     def display(self):
-        print "ESSID:", self.essid
-        print "Access point:", self.bssid
-        print "Mode:", self.mode
+        print("ESSID:", self.essid)
+        print("Access point:", self.bssid)
+        print("Mode:", self.mode)
         if len(self.rate) > 0:
-            print "Highest Bitrate:", self.rate[len(self.rate)-1]
-        print "Quality: Quality ", self.quality.quality,
-        print "Signal ", self.quality.getSignallevel(),
-        print " Noise ", self.quality.getNoiselevel()
-        print "Encryption:", map(lambda x: hex(ord(x)), self.encode)
+            print("Highest Bitrate:", self.rate[len(self.rate)-1])
+        print("Quality: Quality ", self.quality.quality,)
+        print("Signal ", self.quality.getSignallevel(),)
+        print(" Noise ", self.quality.getNoiselevel())
+        print("Encryption:", map(lambda x: hex(ord(x)), self.encode))
         # XXX
-        # print "Frequency:", self.frequency.getFrequency(), "(Channel", self.frequency.getChannel(self.range), ")"
+        # print("Frequency:", self.frequency.getFrequency(), "(Channel", self.frequency.getChannel(self.range), ")")
         for custom in self.custom:
-            print "Custom:", custom
-        print ""
+            print("Custom:", custom_)
+        print("")
 
