diff --git a/pythonwifi/iwlibs.py b/pythonwifi/iwlibs.py
index 5fedede..1c015c6 100644
--- a/pythonwifi/iwlibs.py
+++ b/pythonwifi/iwlibs.py
@@ -111,7 +111,7 @@ def getConfiguredWNICnames():
     result = iwstruct._fcntl(pythonwifi.flags.SIOCGIFCONF, datastr)
     # get the interface names out of the buffer
     for i in range(0, 1024, 32):
-        ifname = buff.tostring()[i:i+32]
+        ifname = buff.tobytes()[i:i+32]
         ifname = struct.unpack('32s', ifname)[0]
         ifname = ifname.split('\0', 1)[0]
         if ifname:
@@ -739,7 +739,7 @@ class WirelessConfig(object):
         status, result = self.iwstruct.iw_get_ext(self.ifname,
                                              pythonwifi.flags.SIOCGIWNAME)
 
-        result = result.tostring().strip(b'\x00')
+        result = result.tobytes().strip(b'\x00')
         if (sys.version_info[0] == 2):
             return result
         else:
@@ -815,7 +815,7 @@ class WirelessConfig(object):
         status, result = self.iwstruct.iw_get_ext(self.ifname,
                                              pythonwifi.flags.SIOCGIWESSID,
                                              data=iwpoint.packed_data)
-        raw_essid = iwpoint.buff.tostring()
+        raw_essid = iwpoint.buff.tobytes()
         result = raw_essid.strip(b'\x00')
         if (sys.version_info[0] == 2):
             return result
@@ -1179,7 +1179,7 @@ class Iwstats(object):
         if i > 0:
             self.error = result
             self.errorflag = i
-        self._parse(buff.tostring())
+        self._parse(buff.tobytes())
 
     def _parse(self, data):
         """ Unpacks iwstruct data. """
@@ -1351,7 +1351,7 @@ class Iwrange(object):
         status, result = iwstruct.iw_get_ext(self.ifname,
                                         pythonwifi.flags.SIOCGIWRANGE,
                                         data=s)
-        data = buff.tostring()
+        data = buff.tobytes()
         self._parse(data)
 
     def _parse(self, data):
@@ -1489,7 +1489,7 @@ class Iwscan(object):
         pbuff, reslen = iwstruct.unpack('Pi', datastr)
         if reslen > 0:
             # Initialize the stream, and turn it into an enumerator
-            self.aplist = self._parse(buff.tostring())
+            self.aplist = self._parse(buff.tobytes())
 
     def _parse(self, data):
         """ Parse the event stream, and return a list of Iwscanresult
