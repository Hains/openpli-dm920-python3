diff --git a/src/dvb_api/fe_misc.c b/src/dvb_api/fe_misc.c
index 57e01a9..4469c13 100755
--- a/src/dvb_api/fe_misc.c
+++ b/src/dvb_api/fe_misc.c
@@ -261,6 +261,7 @@ int  print_FE_BasicCapabilities (int v, int fd_fe)
       if (fi.caps &  FE_CAN_FEC_5_6)  		out_nl (v,"FEC 5/6");
       if (fi.caps &  FE_CAN_FEC_6_7)  		out_nl (v,"FEC 6/7");
       if (fi.caps &  FE_CAN_FEC_7_8)  		out_nl (v,"FEC 7/8");
+      if (fi.caps &  FE_CAN_FEC_8_9)            out_nl (v,"FEC 8/9");
       if (fi.caps &  FE_CAN_FEC_AUTO)	  	out_nl (v,"FEC AUTO");
       if (fi.caps &  FE_CAN_QPSK)	  	out_nl (v,"QPSK");
       if (fi.caps &  FE_CAN_QAM_16)	  	out_nl (v,"QAM 16");
@@ -273,22 +274,18 @@ int  print_FE_BasicCapabilities (int v, int fd_fe)
       if (fi.caps &  FE_CAN_BANDWIDTH_AUTO)		out_nl (v,"auto bandwidth");
       if (fi.caps &  FE_CAN_GUARD_INTERVAL_AUTO)	out_nl (v,"auto guard interval");
       if (fi.caps &  FE_CAN_HIERARCHY_AUTO)	out_nl (v,"auto hierarchy");
-
-#ifdef FE_CAN_CLEAN_SETUP
-      if (fi.caps &  FE_CAN_CLEAN_SETUP)	out_nl (v,"clean setup");
-#endif
-#ifdef FE_CAN_16VSB
       if (fi.caps &  FE_CAN_8VSB)		out_nl (v,"FE_CAN_8VSB");
       if (fi.caps &  FE_CAN_16VSB)		out_nl (v,"FE_CAN_16VSB");
-#endif
-#ifdef FE_NEEDS_BENDING
+      if (fi.caps &  FE_HAS_EXTENDED_CAPS)      out_nl (v,"FE_HAS_EXTENDED_CAPS");
+      if (fi.caps &  FE_CAN_MULTISTREAM)        out_nl (v,"FE_CAN_MULTISTREAM");
+      if (fi.caps &  FE_CAN_TURBO_FEC)          out_nl (v,"FE_CAN_TURBO_FEC");
+      if (fi.caps &  FE_CAN_2G_MODULATION)      out_nl (v,"FE_CAN_2G_MODULATION");
       if (fi.caps &  FE_NEEDS_BENDING)		out_nl (v,"FE_NEEDS_BENDING");
-#endif
-#ifdef FE_CAN_RECOVER
       if (fi.caps &  FE_CAN_RECOVER)		out_nl (v,"FE_CAN_RECOVER");
-#endif
-#ifdef FE_CAN_MUTE_TS
       if (fi.caps &  FE_CAN_MUTE_TS)		out_nl (v,"FE_CAN_MUTE_TS");
+
+#ifdef FE_CAN_CLEAN_SETUP
+      if (fi.caps &  FE_CAN_CLEAN_SETUP)	out_nl (v,"clean setup");
 #endif
 
       indent (-1);
@@ -510,6 +507,9 @@ const char *festr_FE_code_rate (fe_code_rate_t fec)
 	  case FEC_7_8:  s = "FEC 7/8"; break;
 	  case FEC_8_9:  s = "FEC 8/9"; break;
 	  case FEC_AUTO: s = "FEC AUTO"; break;
+          case FEC_3_5:  s = "FEC 3/5"; break;
+          case FEC_9_10: s = "FEC 9/10"; break;
+          case FEC_2_5:  s = "FEC 2/5"; break;
   }
 
   return s;
@@ -529,10 +529,13 @@ const char *festr_FE_modulation (fe_modulation_t modulation)
 	  case QAM_128:  s = "QAM 128"; break;
 	  case QAM_256:  s = "QAM 256"; break;
 	  case QAM_AUTO: s = "QAM AUTO"; break;
-#ifdef VSB_16
 	  case VSB_8:    s = "VSB 8"; break;
 	  case VSB_16:   s = "VSB 16"; break;
-#endif
+          case PSK_8:    s = "PSK 8"; break;
+          case APSK_16:  s = "APSK 16"; break;
+          case APSK_32:  s = "APSK 32"; break;
+          case DQPSK:    s = "DQPSK"; break;
+          case QAM_4_NR: s = "QAM 4 NR"; break;
   }
 
   return s;
@@ -549,6 +552,9 @@ const char *festr_FE_bandwidth (fe_bandwidth_t bandwidth)
 	  case BANDWIDTH_7_MHZ:     s = "7 MHz"; break;
 	  case BANDWIDTH_6_MHZ:     s = "6 MHz"; break;
 	  case BANDWIDTH_AUTO:      s = "AUTO"; break;
+          case BANDWIDTH_5_MHZ:     s = "5 MHz"; break;
+          case BANDWIDTH_10_MHZ:    s = "10 MHz"; break;
+          case BANDWIDTH_1_712_MHZ: s = "1.712 MHz"; break;
   }
 
   return s;
@@ -563,6 +569,12 @@ const char *festr_FE_transmit_mode (fe_transmit_mode_t transmit_mode)
 	  case TRANSMISSION_MODE_2K:     s = "2k mode"; break;
 	  case TRANSMISSION_MODE_8K:     s = "8k mode"; break;
 	  case TRANSMISSION_MODE_AUTO:   s = "auto"; break;
+          case TRANSMISSION_MODE_4K:     s = "4k mode"; break;
+          case TRANSMISSION_MODE_1K:     s = "1k mode"; break;
+          case TRANSMISSION_MODE_16K:    s = "16k mode"; break;
+          case TRANSMISSION_MODE_32K:    s = "32k mode"; break;
+          case TRANSMISSION_MODE_C1:     s = "c1 mode"; break;
+          case TRANSMISSION_MODE_C3780:  s = "c3780 mode"; break;
   }
 
   return s;
@@ -580,6 +592,12 @@ const char *festr_FE_guard_interval (fe_guard_interval_t guard_interval)
 	  case GUARD_INTERVAL_1_8:   s = "1/8"; break;
 	  case GUARD_INTERVAL_1_4:   s = "1/4"; break;
 	  case GUARD_INTERVAL_AUTO:  s = "auto"; break;
+          case GUARD_INTERVAL_1_128:  s = "1/128"; break;
+          case GUARD_INTERVAL_19_128: s = "19/128"; break;
+          case GUARD_INTERVAL_19_256: s = "19/256"; break;
+          case GUARD_INTERVAL_PN420:  s = "PN420"; break;
+          case GUARD_INTERVAL_PN595:  s = "PN595"; break;
+          case GUARD_INTERVAL_PN945:  s = "PN945"; break;
   }
 
   return s;
