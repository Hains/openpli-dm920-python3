From 1a0092db98394c3a55554ff460b48aeade5d54fb Mon Sep 17 00:00:00 2001
From: Hains van den Bosch <hainsvdbosch@ziggo.nl>
Date: Sat, 8 Sep 2018 23:41:32 +0200
Subject: [PATCH] enigma2: adapt network to new ip formatting

Introduced with Busybox 1.29.2

OLd (1.27.2).:
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000\    link/ether 00:09:34:1c:3f:a8 brd ff:ff:ff:ff:ff:ff
2: eth0    inet 192.168.178.185/24 brd 192.168.178.255 scope global eth0
2: eth0    inet6 fe80::209:34ff:fe1c:3fa8/64 scope link \       valid_lft forever preferred_lft forever

New (1.29.2):
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000
    link/ether 00:09:34:1c:3f:a8 brd ff:ff:ff:ff:ff:ff
    inet 192.168.178.185/24 brd 192.168.178.255 scope global eth0
    inet6 fe80::209:34ff:fe1c:3fa8/64 scope link
    valid_lft forever preferred_lft forever
---
 lib/python/Components/Network.py | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/lib/python/Components/Network.py b/lib/python/Components/Network.py
index 56c145828..9ec3f0aa6 100644
--- a/lib/python/Components/Network.py
+++ b/lib/python/Components/Network.py
@@ -71,7 +71,7 @@ class Network:
 		ipRegexp = '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
 		netRegexp = '[0-9]{1,2}'
 		macRegexp = '[0-9a-fA-F]{2}\:[0-9a-fA-F]{2}\:[0-9a-fA-F]{2}\:[0-9a-fA-F]{2}\:[0-9a-fA-F]{2}\:[0-9a-fA-F]{2}'
-		ipLinePattern = re.compile('inet ' + ipRegexp + '/')
+		ipLinePattern = re.compile(ipRegexp + '/')
 		ipPattern = re.compile(ipRegexp)
 		netmaskLinePattern = re.compile('/' + netRegexp)
 		netmaskPattern = re.compile(netRegexp)
@@ -84,24 +84,24 @@ class Network:
 			split = line.strip().split(' ',2)
 			if (split[1][:-1] == iface) or (split[1][:-1] == (iface + '@sys0')):
 				up = self.regExpMatch(upPattern, split[2])
-				mac = self.regExpMatch(macPattern, self.regExpMatch(macLinePattern, split[2]))
 				if up is not None:
 					data['up'] = True
 					if iface is not 'lo':
 						self.configuredInterfaces.append(iface)
+			if split[0] == "link/ether":
+				mac = self.regExpMatch(macPattern, self.regExpMatch(macLinePattern, split[0]))
+				bcast = self.regExpMatch(ipPattern, self.regExpMatch(bcastLinePattern, split[2]))
 				if mac is not None:
 					data['mac'] = mac
-			if split[1] == iface:
-				if re.search(globalIPpattern, split[2]):
-					ip = self.regExpMatch(ipPattern, self.regExpMatch(ipLinePattern, split[2]))
-					netmask = self.calc_netmask(self.regExpMatch(netmaskPattern, self.regExpMatch(netmaskLinePattern, split[2])))
-					bcast = self.regExpMatch(ipPattern, self.regExpMatch(bcastLinePattern, split[2]))
-					if ip is not None:
-						data['ip'] = self.convertIP(ip)
-					if netmask is not None:
-						data['netmask'] = self.convertIP(netmask)
-					if bcast is not None:
-						data['bcast'] = self.convertIP(bcast)
+				if bcast is not None:
+					data['bcast'] = self.convertIP(bcast)
+			if split[0] == "inet":
+				ip = self.regExpMatch(ipPattern, self.regExpMatch(ipLinePattern, split[1]))
+				netmask = self.calc_netmask(self.regExpMatch(netmaskPattern, self.regExpMatch(netmaskLinePattern, split[1])))
+				if ip is not None:
+					data['ip'] = self.convertIP(ip)
+				if netmask is not None:
+					data['netmask'] = self.convertIP(netmask)
 
 		if 'ip' not in data:
 			data['dhcp'] = True
-- 
2.17.1

